{
  "compilerOptions": {

    /* Projects */
    // "incremental": true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */
    "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */

    /* Language and Environment */
    "target": "es2020",                                  /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
    "lib": ["ES2020"],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */
    "moduleDetection": "force",                        /* Control what method is used to detect module-format JS files. */
    "allowImportingTsExtensions": true,
    /* Modules */
    "module": "ESNext",                                /* Specify what module code is generated. */
    "rootDir": ".",                                  /* Specify the root folder within your source files. */
    "moduleResolution": "bundler",                     /* Specify how TypeScript looks up a file from a given module specifier. */

    "typeRoots":["./node_modules/@types", "types/"],
    "noEmit": true,                                   /* Disable emitting files from a compilation. */
    "baseUrl": ".", /* Add baseUrl to help resolve imports */

    "removeComments": true,                           /* Disable emitting comments. */

    "verbatimModuleSyntax": true,                     /* Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting. */
    "allowSyntheticDefaultImports": true,             /* Allow 'import x from y' when a module doesn't have a default export. */
    "esModuleInterop": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */
    "forceConsistentCasingInFileNames": true,            /* Ensure that casing is correct in imports. */

    /* Type Checking */
    "strict": true,                                      /* Enable all strict type-checking options. */
    "strictNullChecks": true,                         /* When type checking, take into account 'null' and 'undefined'. */

    "noFallthroughCasesInSwitch": true,               /* Enable error reporting for fallthrough cases in switch statements. */
 
    "skipLibCheck": true                                 /* Skip type checking all .d.ts files. */
  },
  "include": ["src/**/*", "scripts/**/*", "types/**/*"]
}
